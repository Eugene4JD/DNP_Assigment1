@inject IFamilyService FamilyService;
@inject IModalService ModalService;

@page "/view"
@using DNPAssigment1.Models
@using DNPAssigment1.Data

<p>Select your family:</p>
<input @bind-value="SearchTerm" @bind-value:event="oninput">
<span class="text-muted ml-5">
    Showing @FilteredFamilies.Count out of @Families.Count
</span>


@if (Families == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!Families.Any())
{
    <p>There are no families</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Family ID</th>
            <th>Last Name</th>
            <th>Address</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var family in FilteredFamilies)
        {
            <tr>
                <td>@family.Id</td>
                <td>@family.Adults.First().LastName</td>
                <td>@family.Address</td>
                <td>
                    <button @onclick="@(() => SetSelectedFamily(family))"  class="btn btn-outline-dark btn-sm">More info.</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}



@code {
    string SearchTerm { get; set; } = "";
    private IList<Family> Families;
    IList<Family> FilteredFamilies => Families.Where(i => i.Adults.First().LastName.ToLower().Contains(SearchTerm.ToLower())).ToList();
    private IList<Adult> Adults;
    private IList<Child> Children;
    private IList<Pet> Pets;

    protected async override Task OnInitializedAsync()
    {
        Families = FamilyService.GetFamilies();
    }

    private void SetSelectedFamily(Family family)
    {
        FamilyService.setSelectedFamily(family);
        ModalService.Show<FamilyView>("Security Example");
    }

}