@page "/add"
@using DNPAssigment1.Shared
@using DNPAssigment1.Data
@using DNPAssigment1.Models
<h3>Add</h3>
<form>
<div class="form-group">
    <label>Choose family: </label>
    <select class="form-control" @onchange="onFamilyChange">
        <selesct selected value="choose">choose</selesct>
        @foreach (var family in getFamilies())
        {
            <option value="@family.Id">@family.Id</option>
        }
    </select>
    <label>Choose type: </label>
    <select class="form-control" @onchange="PopRightForm" bind="@selectedType">
        <option value="choose">choose</option>
        <option value="adult">Adult</option>
        <option value="child">Child</option>
        <option value="pet">Pet</option>
    </select>
</div>
</form>
<div>

    @if (adult)
    {
        <form>
            <div class="form-group">
                <label>Fist name: </label>
                <input  class="form-control input-group-text" @bind-value="newAdult.FirstName">
            </div>
            <div class="form-group">
                <label>Last name: </label>
                <input class="form-control input-group-text" @bind-value="newAdult.LastName">
            </div>
            <div class="form-group">
                <label>Age: </label>
                <input class="form-control input-group-text" @bind-value="newAdult.Age">
            </div>
            <div class="form-group">
                <label>ID: </label>
                <input class="form-control input-group-text" @bind-value="newAdult.Id">
            </div>
            <div class="form-group">
                <label>Choose eye color: </label>
                <select class="form-control" @onchange="onEyeColorChange">
                    @foreach (var color in eyeColors)
                    {
                        <option value="@color">@color</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Choose hair color: </label>
                <select class="form-control" @onchange="onHairColorChange">
                    @foreach (var color in  hairColors)
                    {
                        <option value="@color">@color</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Choose job: </label>
                <select class="form-control" @onchange="onJobChange">
                    @foreach (var job in  jobs)
                    {
                        <option value="@job">@job</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Weigh: </label>
                <input class="form-control input-group-text" @bind-value="newAdult.Weight">
            </div>
            <button class="btn btn-secondary" @onclick="saveAdult">Save adult</button>
        </form>
    }
</div>
<div>
    @if (child)
    {
        <form>
            <div class="form-group">
                <label>Fist name: </label>
                <input class="form-control input-group-text" @bind-value="newChild.FirstName">
            </div>
            <div class="form-group">
                <label>Last name: </label>
                <input class="form-control input-group-text" @bind-value="newChild.LastName">
            </div>
            <div class="form-group">
                <label>Age: </label>
                <input class="form-control input-group-text" @bind-value="newChild.Age">
            </div>
            <div class="form-group">
                <label>ID: </label>
                <input class="form-control input-group-text" @bind-value="newChild.Id">
            </div>
            <div class="form-group">
                <label>Choose eye color: </label>
                <select class="form-control" @onchange="onEyeColorChange">
                    @foreach (var color in eyeColors)
                    {
                        <option value="@color">@color</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Choose hair color: </label>
                <select class="form-control" @onchange="onHairColorChange">
                    @foreach (var color in  hairColors)
                    {
                        <option value="@color">@color</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Weigh: </label>
                <input class="form-control input-group-text" @bind-value="newChild.Weight">
            </div>
            <button class="btn btn-secondary" @onclick="saveChild">Save child</button>
        </form>
    }
</div>
<div>
    @if (pet)
    {
        <form>
            <div class="form-group">
                <label>Choose Specie: </label>
                <select class="form-control" @onchange="petSpecieSelected">
                    @foreach (var specie in species)
                    {
                        <option value="@specie">@specie.ToString()</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Name: </label>
                <input class="form-control input-group-text" @bind-value="newPet.Name">
            </div>
            <div class="form-group">
                <label>Age: </label>
                <input class="form-control input-group-text" @bind-value="newPet.Age">
            </div>
            <button class="btn btn-secondary" @onclick="savePet">Save pet</button>
        </form>
    }
</div>
@* <div> *@
@* <button class="btn btn-primary" @onclick="SaveFamily">Save Family</button> *@
@* </div> *@


@code {
    //------pet--------------------------
    Array species = Enum.GetValues(typeof(PetSpecies));
    Pet newPet = new Pet();

    private void savePet()
    {
        //TODO: saving comes here

        pet = false;
    }

    //-------adult------------------------

    Adult newAdult = new Adult();

    private void saveAdult()
    {
        //TODO: saving comes here

        adult = false;
    }

    //-------child-------------------------
    Child newChild = new Child();


    private void saveChild()
    {
        //TODO: saving comes here

        child = false;
    }

    //--------Family------------------------
    public Family CurrentFamily;
    public Family newFamily;

    private IList<Family> getFamilies()
    {
        IFamilyService familyService = new FamilyService();

        return familyService.GetFamilies();
    }

    //-------sahred--------------------------
    private bool adult = false;
    private bool child = false;
    private bool pet = false;
    public string selectedType;

    Array eyeColors = Enum.GetValues(typeof(EyeColor));
    Array hairColors = Enum.GetValues(typeof(HairColor));
    Array jobs = Enum.GetValues(typeof(Job));
    string type = "";

    private void onEyeColorChange(ChangeEventArgs obj)
    {
        if (type.Equals("Adult"))
        {
            newAdult.EyeColor = Enum.Parse<EyeColor>(obj.Value.ToString());
        }
        else
        {
            newChild.EyeColor = Enum.Parse<EyeColor>(obj.Value.ToString());
        }
    }

    private void onHairColorChange(ChangeEventArgs obj)
    {
        if (type.Equals("Adult"))
        {
            newAdult.HairColor = Enum.Parse<HairColor>(obj.Value.ToString());
        }
        else
        {
            newChild.HairColor = Enum.Parse<HairColor>(obj.Value.ToString());
        }
    }

    private void onJobChange(ChangeEventArgs obj)
    {
        newAdult.Job = Enum.Parse<Job>(obj.Value.ToString());
    }

    //----------------------------------------


    private void PopRightForm(ChangeEventArgs e)
    {
        switch (e.Value.ToString())
        {
            case "adult":
                child = false;
                pet = false;
                adult = true;
                type = "Adult";
                break;
            case "child":
                child = true;
                pet = false;
                adult = false;
                type = "Child";
                break;
            case "pet":
                child = false;
                pet = true;
                adult = false;
                type = "Pet";
                break;
            case "choose":
                child = false;
                pet = false;
                adult = false;
                break;
                
        }
    }


    private void petSpecieSelected(ChangeEventArgs obj)
    {
        switch (obj.ToString())
        {
            case "Hamster":
                newPet.Species = PetSpecies.Hamster;
                break;
            case "Bunny":
                newPet.Species = PetSpecies.Bunny;
                break;
            case "Frog":
                newPet.Species = PetSpecies.Frog;
                break;
            case "Budgerigar":
                newPet.Species = PetSpecies.Budgerigar;
                break;
            case "Owl":
                newPet.Species = PetSpecies.Owl;
                break;
            case "Snake":
                newPet.Species = PetSpecies.Snake;
                break;
            case "Dog":
                newPet.Species = PetSpecies.Dog;
                break;
            case "Cat":
                newPet.Species = PetSpecies.Cat;
                break;
        }
    }


    private void onFamilyChange(ChangeEventArgs obj)
    {
        if (!obj.Value.ToString().Equals("choose"))
        {
            int i = int.Parse(obj.Value.ToString());
            CurrentFamily = getFamilies()[i - 1];
        }
    }

}